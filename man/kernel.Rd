% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{kernel}
\alias{kernel}
\alias{kernel_DFWER_single_fast}
\alias{kernel_DFWER_single_crit}
\title{Kernel Functions}
\usage{
kernel_DFWER_single_fast(
  pCDFlist,
  pvalues,
  independent = FALSE,
  pCDFcounts = NULL
)

kernel_DFWER_single_crit(
  pCDFlist,
  support,
  sorted_pv,
  alpha = 0.05,
  independent = FALSE,
  pCDFcounts = NULL
)
}
\arguments{
\item{pCDFlist}{list of the supports of the CDFs of the p-values; each list item must be a numeric vector, which is sorted in increasing order and whose last element equals 1.}

\item{pvalues}{numeric vector, sorted in increasing order, that either
must contain the entirety of all observable values of
the p-value supports (when computing critical
constants) or only the sorted raw p-values.}

\item{independent}{single boolean specifying whether the \eqn{p}-values
are independent; if FALSE (the default), the discrete
Bonferroni procedure [d-Bonf] is performed;
otherwise, [d-Ind] is computed.}

\item{pCDFcounts}{integer vector of counts that indicates to how many
p-values each \strong{unique} p-value distributions belongs.}

\item{support}{numeric vector, sorted in increasing order, that
contains the entirety of all observable values of the
p-value supports.}

\item{sorted_pv}{numeric vector, sorted in increasing order, containing
the raw p-values.}

\item{alpha}{single real number strictly between 0 and 1 indicating
the target FWER level.}
}
\value{
For \code{kernel_DFWER_fast()} a vector of transformed p-values is returned.
\code{kernel_DFWER_crit} returns a list with critical constants (\verb{$crit.consts})
and transformed p-values (\verb{$pval.transf}).
}
\description{
Kernel functions that transform observed p-values or their support according
to a discrete FWER approach. The outputs are used by \code{\link[=discrete.FWER]{discrete.FWER()}}.
\code{kernel_DFWER_fast}, computes the transformed \eqn{p}-values, while
\code{kernel_DFWER_crit} additionally computes and returns the critical
constants. The end user should not use these functions directly, as they are
internal functions and parameters (including their names, order, etc.) may
be changed without notice!
}
\examples{
X1 <- c(4, 2, 2, 14, 6, 9, 4, 0, 1)
X2 <- c(0, 0, 1, 3, 2, 1, 2, 2, 2)
N1 <- rep(148, 9)
N2 <- rep(132, 9)
Y1 <- N1 - X1
Y2 <- N2 - X2
df <- data.frame(X1, Y1, X2, Y2)
df

# Construction of the p-values and their supports with Fisher's exact test
library(DiscreteTests)  # for Fisher's exact test
test.results <- fisher_test_pv(df)
raw.pvalues <- test.results$get_pvalues()
pCDFlist <- test.results$get_pvalue_supports()

alpha <- 0.05

\dontrun{
# If not searching for critical constants, we use only the observed p-values
sorted.pvals <- sort(raw.pvalues)
y.dBonf.fast <- DiscreteFWER:::kernel_DFWER_fast(pCDFlist, sorted.pvals)
y.dInd.fast  <- DiscreteFWER:::kernel_DFWER_fast(pCDFlist, sorted.pvals, TRUE)
# transformed values
y.dBonf.fast
y.dInd.fast

# compute transformed support
support      <- sort(unique(unlist(pCDFlist)))
y.dBonf.crit <- DiscreteFWER:::kernel_DFWER_crit(pCDFlist, support, sorted.pvals, alpha)
y.dInd.crit  <- DiscreteFWER:::kernel_DFWER_crit(pCDFlist, support, sorted.pvals, alpha, TRUE)
# critical constants
y.dBonf.crit$crit.consts
y.dInd.crit$crit.consts
# Transformed p-values
y.dBonf.crit$pval.transf
y.dInd.crit$pval.transf
}

}
\seealso{
\code{\link[=discrete.FWER]{discrete.FWER()}}, \code{\link[=direct.discrete.FWER]{direct.discrete.FWER()}}
}
